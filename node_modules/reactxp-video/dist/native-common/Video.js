"use strict";
/*
* Video.tsx
*
* Copyright (c) Microsoft Corporation. All rights reserved.
* Licensed under the MIT license.
*
* RN-specific implementation of the cross-platform Video abstraction.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_native_video_1 = require("react-native-video");
var RX = require("reactxp");
var Video = /** @class */ (function (_super) {
    __extends(Video, _super);
    function Video(props) {
        var _this = _super.call(this, props) || this;
        _this._mountedComponent = null;
        _this._onMount = function (component) {
            _this._mountedComponent = component;
        };
        _this._onError = function () {
            if (!_this._mountedComponent) {
                return;
            }
            if (_this.props.onError) {
                _this.props.onError();
            }
        };
        _this._onLoad = function () {
            if (!_this._mountedComponent) {
                return;
            }
            // The native control calls _onLoad only if you are
            // not displaying the native play controls.
            if (!_this.props.showControls && _this.props.onCanPlay) {
                _this.props.onCanPlay();
            }
        };
        _this._onLoadData = function (loadInfo) {
            if (!_this._mountedComponent) {
                return;
            }
            if (_this.props.onLoadedData) {
                _this.props.onLoadedData(loadInfo);
            }
            // The native control calls _onLoad only if you are
            // not displaying the native play controls.
            if (_this.props.showControls && _this.props.onCanPlay) {
                _this.props.onCanPlay();
            }
            _this.setState({ duration: loadInfo.duration });
        };
        _this._onBuffer = function (bufferInfo) {
            if (!_this._mountedComponent) {
                return;
            }
            if (bufferInfo.isBuffering) {
                if (_this.props.onBuffer) {
                    _this.props.onBuffer();
                }
            }
            else {
                if (_this.props.onCanPlayThrough) {
                    _this.props.onCanPlayThrough();
                }
            }
        };
        _this._onEnd = function () {
            if (!_this._mountedComponent) {
                return;
            }
            if (!_this.props.loop) {
                // Stop it so it doesn't auto-start.
                _this.setState({ isPlaying: false });
                // Seek video to start.
                _this.seek(0);
            }
            if (_this.props.onEnded) {
                _this.props.onEnded();
            }
        };
        _this.state = {
            isPlaying: false,
            isMuted: false
        };
        return _this;
    }
    Video.prototype.render = function () {
        return (React.createElement(react_native_video_1.default, { ref: this._onMount, controls: this.props.showControls, paused: !this.state.isPlaying, muted: this.state.isMuted, repeat: this.props.loop, source: { uri: this.props.source }, style: this.props.style, onEnd: this._onEnd, onBuffer: this._onBuffer, onLoadStart: this.props.onLoadStart, onProgress: this.props.onProgress, onReadyForDisplay: this._onLoad, onLoad: this._onLoadData, onError: this._onError, resizeMode: this.props.resizeMode || 'contain' }));
    };
    Video.prototype.seek = function (position) {
        if (this._mountedComponent) {
            this._mountedComponent.seek(position);
        }
    };
    Video.prototype.seekPercent = function (percentage) {
        if (this._mountedComponent) {
            this._mountedComponent.seek(this.state.duration * percentage);
        }
    };
    Video.prototype.play = function () {
        this.setState({ isPlaying: true });
    };
    Video.prototype.pause = function () {
        this.setState({ isPlaying: false });
    };
    Video.prototype.stop = function () {
        this.pause();
        this.seek(0);
    };
    Video.prototype.mute = function (muted) {
        this.setState({ isMuted: muted });
    };
    return Video;
}(RX.Component));
exports.default = Video;
